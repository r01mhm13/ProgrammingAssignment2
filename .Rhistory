answer<-sum(readings)/sum(observations)
answer
id<-1:10
pollutant<-"sulfate"
readings<-numeric()
observations<-numeric()
for(i in id){
csvfile <- sprintf("%03d.csv", i)
filepath <- paste(directory, csvfile, sep="\\")
monitor <- read.csv(filepath, header=TRUE)
if "sulfate" %in% pollutant {
y<-sum(monitor[,2],na.rm=TRUE)
z<-sum(!is.na(monitor[,2]))
readings[i]<-y
observations[i]<-z
}
if "nitrate" %in% pollutant {
y<-sum(monitor[,3],na.rm=TRUE)
z<-sum(!is.na(monitor[,3]))
readings[i]<-y
observations[i]<-z
}
}
answer<-sum(readings)/sum(observations)
answer
id<-1:10
pollutant<-"sulfate"
readings<-numeric()
observations<-numeric()
for(i in id){
csvfile <- sprintf("%03d.csv", i)
filepath <- paste(directory, csvfile, sep="\\")
monitor <- read.csv(filepath, header=TRUE)
if "sulfate" %in% pollutant {
y<-sum(monitor[,2],na.rm=TRUE)
z<-sum(!is.na(monitor[,2]))
readings[i]<-y
observations[i]<-z
}
if "nitrate" %in% pollutant {
y<-sum(monitor[,3],na.rm=TRUE)
z<-sum(!is.na(monitor[,3]))
readings[i]<-y
observations[i]<-z
}
}
answer<-sum(readings)/sum(observations)
answer
id<-1:10
pollutant<-"sulfate"
readings<-numeric()
observations<-numeric()
for(i in id){
csvfile <- sprintf("%03d.csv", i)
filepath <- paste(directory, csvfile, sep="\\")
monitor <- read.csv(filepath, header=TRUE)
if ("sulfate" %in% pollutant) {
y<-sum(monitor[,2],na.rm=TRUE)
z<-sum(!is.na(monitor[,2]))
readings[i]<-y
observations[i]<-z
}
if ("nitrate" %in% pollutant) {
y<-sum(monitor[,3],na.rm=TRUE)
z<-sum(!is.na(monitor[,3]))
readings[i]<-y
observations[i]<-z
}
}
answer<-sum(readings)/sum(observations)
answer
id<-1:10
pollutant<-"nitrate"
readings<-numeric()
observations<-numeric()
for(i in id){
csvfile <- sprintf("%03d.csv", i)
filepath <- paste(directory, csvfile, sep="\\")
monitor <- read.csv(filepath, header=TRUE)
if ("sulfate" %in% pollutant) {
y<-sum(monitor[,2],na.rm=TRUE)
z<-sum(!is.na(monitor[,2]))
readings[i]<-y
observations[i]<-z
}
if ("nitrate" %in% pollutant) {
y<-sum(monitor[,3],na.rm=TRUE)
z<-sum(!is.na(monitor[,3]))
readings[i]<-y
observations[i]<-z
}
}
answer<-sum(readings)/sum(observations)
answer
id<-70:72
pollutant<-"nitrate"
readings<-numeric()
observations<-numeric()
for(i in id){
csvfile <- sprintf("%03d.csv", i)
filepath <- paste(directory, csvfile, sep="\\")
monitor <- read.csv(filepath, header=TRUE)
if ("sulfate" %in% pollutant) {
y<-sum(monitor[,2],na.rm=TRUE)
z<-sum(!is.na(monitor[,2]))
readings[i]<-y
observations[i]<-z
}
if ("nitrate" %in% pollutant) {
y<-sum(monitor[,3],na.rm=TRUE)
z<-sum(!is.na(monitor[,3]))
readings[i]<-y
observations[i]<-z
}
}
answer<-sum(readings)/sum(observations)
answer
id<-23
pollutant<-"nitrate"
readings<-numeric()
observations<-numeric()
for(i in id){
csvfile <- sprintf("%03d.csv", i)
filepath <- paste(directory, csvfile, sep="\\")
monitor <- read.csv(filepath, header=TRUE)
if ("sulfate" %in% pollutant) {
y<-sum(monitor[,2],na.rm=TRUE)
z<-sum(!is.na(monitor[,2]))
readings[i]<-y
observations[i]<-z
}
if ("nitrate" %in% pollutant) {
y<-sum(monitor[,3],na.rm=TRUE)
z<-sum(!is.na(monitor[,3]))
readings[i]<-y
observations[i]<-z
}
}
answer<-sum(readings)/sum(observations)
answer
id<-1:10
pollutant<-"sulfate"
readings<-numeric()
observations<-numeric()
for(i in id){
csvfile <- sprintf("%03d.csv", i)
filepath <- paste(directory, csvfile, sep="\\")
monitor <- read.csv(filepath, header=TRUE)
if ("sulfate" %in% pollutant) {
y<-sum(monitor[,2],na.rm=TRUE)
z<-sum(!is.na(monitor[,2]))
readings[i]<-y
observations[i]<-z
}
if ("nitrate" %in% pollutant) {
y<-sum(monitor[,3],na.rm=TRUE)
z<-sum(!is.na(monitor[,3]))
readings[i]<-y
observations[i]<-z
}
}
answer<-sum(readings)/sum(observations)
answer
id<-1:10
pollutant<-"sulfate"
readings<-numeric()
observations<-numeric()
for(i in id){
csvfile <- sprintf("%03d.csv", i)
filepath <- paste(directory, csvfile, sep="\\")
monitor <- read.csv(filepath, header=TRUE)
if ("sulfate" %in% pollutant) {
y<-sum(monitor[,2],na.rm=TRUE)
z<-sum(!is.na(monitor[,2]))
readings[i]<-y
observations[i]<-z
}
else if ("nitrate" %in% pollutant) {
y<-sum(monitor[,3],na.rm=TRUE)
z<-sum(!is.na(monitor[,3]))
readings[i]<-y
observations[i]<-z
}
}
answer<-sum(readings)/sum(observations)
answer
id<-23
pollutant<-"nitrate"
readings<-numeric()
observations<-numeric()
for(i in id){
csvfile <- sprintf("%03d.csv", i)
filepath <- paste(directory, csvfile, sep="\\")
monitor <- read.csv(filepath, header=TRUE)
if ("sulfate" %in% pollutant) {
y<-sum(monitor[,2],na.rm=TRUE)
z<-sum(!is.na(monitor[,2]))
readings[i]<-y
observations[i]<-z
}
else if ("nitrate" %in% pollutant) {
y<-sum(monitor[,3],na.rm=TRUE)
z<-sum(!is.na(monitor[,3]))
readings[i]<-y
observations[i]<-z
}
}
answer<-sum(readings)/sum(observations)
answer
id<-23
pollutant<-"sulfate"
readings<-numeric()
observations<-numeric()
for(i in id){
csvfile <- sprintf("%03d.csv", i)
filepath <- paste(directory, csvfile, sep="\\")
monitor <- read.csv(filepath, header=TRUE)
if ("sulfate" %in% pollutant) {
y<-sum(monitor[,2],na.rm=TRUE)
z<-sum(!is.na(monitor[,2]))
readings[i]<-y
observations[i]<-z
}
else if ("nitrate" %in% pollutant) {
y<-sum(monitor[,3],na.rm=TRUE)
z<-sum(!is.na(monitor[,3]))
readings[i]<-y
observations[i]<-z
}
}
answer<-sum(readings)/sum(observations)
answer
print(with(iris(tapply(Sepal.Length,mean))))
library(datasets)
data(iris)
print(with(iris(tapply(Sepal.Length,mean))))
print(with(iris(tapply(Sepal.Length,mean))))
print(with(iris,tapply(Sepal.Length,mean)))
print(with(iris,tapply(Sepal.Length,Species,mean)))
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
with(mtcars,tapply(hp,cyl,mean))
with(mtcars,tapply(hp,cyl,mean,simplify=FALSE))
y<-with(mtcars,tapply(hp,cyl,mean,simplify=FALSE))
y$"8"-y"4"
y<-with(mtcars,tapply(hp,cyl,mean,simplify=FALSE))
print(y$8-y$4)
y<-with(mtcars,tapply(hp,cyl,mean,simplify=FALSE))
print(y$"8"-y$"4")
?solve
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
h8 <- hilbert(8); h8
sh8 <- solve(h8)
round(sh8 %*% h8, 3
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
h8 <- hilbert(8); h8
sh8 <- solve(h8)
round(sh8 %*% h8, 3)
setwd("~/GitHub/ProgrammingAssignment2")
?<<
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(matrix(1:4,2,2))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(matrix(1:4,2,2))
matrix_example<-matrix(1:4,2,2)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
setmatrix<-function(y){
x<<-y
m<<-NULL
}
getmatrix<-function() x
setinverse<-function(solve) m<<- solve
getinverse<-function() m
list(setinverse=setinverse, getinverse=getinverse,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(matrix_example))
matrix_example<-matrix(1:4,2,2)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
setmatrix<-function(y){
x<<-y
m<<-NULL
}
getmatrix<-function() x
setinverse<-function(solve) m<<- solve
getinverse<-function() m
list(setinverse=setinverse, getinverse=getinverse,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(matrix_example)
matrix(1:4,2,2)
inv_matrix<-solve(input_matrix)
print(inv_matrix)
input_matrix<-matrix(1:4,2,2)
inv_matrix<-solve(input_matrix)
print(inv_matrix)
x<-matrix(1:4,2,2)
makeMatrixSolve <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
print(set)
print(x$set)
ls(makeMatrixSolve)
makeCacheMatrix <- function(matrix(1:4,2,2)) {
m<-NULL
setmatrix<-function(y){
x<<-y
m<<-NULL
}
getmatrix<-function() x
setinverse<-function(solve) m<<- solve
getinverse<-function() m
list(setinverse=setinverse, getinverse=getinverse,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
makeCacheMatrix <- function(matrix(1:4,2,2)) {
m<-NULL
setmatrix<-function(y){
x<<-y
m<<-NULL
}
getmatrix<-function() x
setinverse<-function(solve) m<<- solve
getinverse<-function() m
list(setinverse=setinverse, getinverse=getinverse, setmatrix=setmatrix, getmatrix=getmatrix)
}
makeCacheMatrix <- function(matrix(1:4,2,2)) {
m<-NULL
setmatrix<-function(y){
x<<-y
m<<-NULL
}
getmatrix<-function() x
setinverse<-function(solve) m<<- solve
getinverse<-function() m
list(setinverse=setinverse, getinverse=getinverse, setmatrix=setmatrix, getmatrix=getmatrix)
}
makeCacheMatrix <- function(matrix(1:4,2,2)) {
m<-NULL
setmatrix<-function(y){
x<<-y
m<<-NULL
}
getmatrix<-function() x
setinverse<-function(solve) m<<- solve
getinverse<-function() m
list(setinverse=setinverse, getinverse=getinverse, setmatrix=setmatrix, getmatrix=getmatrix)
makeCacheMatrix <- function(matrix(1:4,2,2)) {
m<-NULL
setmatrix<-function(y){
x<<-y
m<<-NULL
}
getmatrix<-function() x
setinverse<-function(solve) m<<- solve
getinverse<-function() m
list(setinverse=setinverse, getinverse=getinverse, setmatrix=setmatrix, getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix <- function(matrix(1:4,2,2)) {
m<-NULL
setmatrix<-function(y){
x<<-y
m<<-NULL
}
getmatrix<-function() x
setinverse<-function(solve) m<<- solve
getinverse<-function() m
list(setinverse=setinverse, getinverse=getinverse, setmatrix=setmatrix, getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix
if(!is.null(m)){
message("getting cached data")
return(m)}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/.active-rstudio-document')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
x<-matrix(1:4,2,2)
makeCacheMatrix <- function(x) {
m<-NULL
setmatrix<-function(y){
x<<-y
m<<-NULL
}
getmatrix<-function() x
setinverse<-function(solve) m<<- solve
getinverse<-function() m
print(list(setinverse=setinverse, getinverse=getinverse, setmatrix=setmatrix, getmatrix=getmatrix))
}
cacheSolve <- function(x, ...) {
m<-x$getmatrix
if(!is.null(m)){
message("getting cached data")
return(m)}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
w<-matrix(1:6,2,3)
cacheSolve(w)
debug(cacheSolve()
n
traceback(cacheSolve)
